name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required to get tags
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Configure Git (for npm version command)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
      
    - name: Extract version from tag
      id: get_version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        
    - name: Align package.json version with tag
      run: |
        # npm version requires git history and no uncommitted changes in the working directory
        # if the version in package.json is already correct.
        # --allow-same-version ensures it doesn't fail if already aligned.
        # --no-git-tag-version prevents it from creating a new tag.
        npm version ${{ env.TAG_VERSION }} --no-git-tag-version --allow-same-version
        echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        
    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build
        
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }} # Uses the version from package.json after alignment
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Changes in v${{ env.NEW_VERSION }}
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          
          ### Installation
          ```bash
          npm install -g pocketbase-zod-generator@${{ env.NEW_VERSION }}
          ```
          
          ### Usage
          ```bash
          pocketbase-zod-generator --env
          ```
        draft: false
        prerelease: false # Set to true if you want to mark releases based on tags like v1.0.0-rc.1 as pre-release
        
    - name: Post-release notification
      run: |
        echo "üéâ Successfully published pocketbase-zod-generator@v${{ env.NEW_VERSION }}"
        echo "üì¶ NPM: https://www.npmjs.com/package/pocketbase-zod-generator"
        echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }}"